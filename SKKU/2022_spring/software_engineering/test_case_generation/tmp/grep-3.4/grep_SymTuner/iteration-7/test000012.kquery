array A-data-stat[144] : w32 -> w8 = symbolic
array arg00[6] : w32 -> w8 = symbolic
array arg01[9] : w32 -> w8 = symbolic
array arg02[2] : w32 -> w8 = symbolic
array arg03[7] : w32 -> w8 = symbolic
array arg04[11] : w32 -> w8 = symbolic
array const_arr1[768] : w32 -> w
array model_version[4] : w32 -> w8 = symbolic
array stdin-stat[144] : w32 -> w8 = symbolic
(query [(Sle 32
              (SExt w32 N0:(Read w8 1 arg00)))
         (Sle 32
              (SExt w32 N1:(Read w8 3 arg00)))
         (Sle 32
              (SExt w32 N2:(Read w8 4 arg00)))
         (Eq false
             (Sle 32
                  (SExt w32 (Read w8 0 arg01))))
         (Eq false
             (Sle 32
                  (SExt w32 (Read w8 1 arg01))))
         (Eq false
             (Sle 32
                  (SExt w32 (Read w8 2 arg01))))
         (Eq false
             (Sle 32
                  (SExt w32 (Read w8 3 arg01))))
         (Eq false
             (Sle 32
                  (SExt w32 (Read w8 4 arg01))))
         (Eq false
             (Sle 32
                  (SExt w32 (Read w8 5 arg01))))
         (Eq false
             (Sle 32
                  (SExt w32 (Read w8 6 arg01))))
         (Eq false
             (Sle 32
                  (SExt w32 (Read w8 7 arg01))))
         (Eq false
             (Sle 32
                  (SExt w32 (Read w8 0 arg03))))
         (Eq false
             (Sle 32
                  (SExt w32 (Read w8 1 arg03))))
         (Eq false
             (Sle 32
                  (SExt w32 (Read w8 2 arg03))))
         (Eq false
             (Sle 32
                  (SExt w32 (Read w8 3 arg03))))
         (Eq false
             (Sle 32
                  (SExt w32 (Read w8 4 arg03))))
         (Eq false
             (Sle 32
                  (SExt w32 (Read w8 5 arg03))))
         (Eq false
             (Sle 32
                  (SExt w32 (Read w8 0 arg04))))
         (Eq false
             (Sle 32
                  (SExt w32 (Read w8 1 arg04))))
         (Eq false
             (Sle 32
                  (SExt w32 (Read w8 2 arg04))))
         (Eq false
             (Sle 32
                  (SExt w32 (Read w8 3 arg04))))
         (Eq false
             (Sle 32
                  (SExt w32 (Read w8 4 arg04))))
         (Eq false
             (Sle 32
                  (SExt w32 (Read w8 5 arg04))))
         (Eq false
             (Sle 32
                  (SExt w32 (Read w8 6 arg04))))
         (Eq false
             (Sle 32
                  (SExt w32 (Read w8 7 arg04))))
         (Eq false
             (Sle 32
                  (SExt w32 (Read w8 8 arg04))))
         (Eq false
             (Sle 32
                  (SExt w32 (Read w8 9 arg04))))
         (Eq false
             (Eq 0
                 (And w64 (ReadLSB w64 8 A-data-stat)
                          2147483647)))
         (Eq 0
             (And w64 (ReadLSB w64 56 A-data-stat)
                      18446744073709486080))
         (Eq false
             (Eq 0
                 (And w64 (ReadLSB w64 8 stdin-stat)
                          2147483647)))
         (Eq 0
             (And w64 (ReadLSB w64 56 stdin-stat)
                      18446744073709486080))
         (Eq 1
             (ReadLSB w32 0 model_version))
         (Eq 45 (Read w8 0 arg02))
         (Eq 10 (Read w8 2 arg00))
         (Eq 36 (Read w8 0 arg00))
         (Eq false (Eq 92 N0))
         (Eq 0
             (And w32 (ZExt w32 (ReadLSB w16 N3:(Extract w32 0 (Add w64 256
                                                                        (Mul w64 2
                                                                                 N4:(SExt w64 (ZExt w32 N0))))) const_arr1))
                      8))
         (Eq false (Eq 123 N0))
         (Eq false (Eq 124 N0))
         (Eq false (Eq 125 N0))
         (Eq false (Eq 91 N0))
         (Eq false (Eq 94 N0))
         (Eq false (Eq 36 N0))
         (Eq false (Eq 40 N0))
         (Eq false (Eq 41 N0))
         (Eq false (Eq 42 N0))
         (Eq false (Eq 43 N0))
         (Eq false (Eq 46 N0))
         (Eq false (Eq 63 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 92 N1))
         (Eq 0
             (And w32 (ZExt w32 (ReadLSB w16 N5:(Extract w32 0 (Add w64 256
                                                                        (Mul w64 2
                                                                                 N6:(SExt w64 (ZExt w32 N1))))) const_arr1))
                      8))
         (Eq false (Eq 123 N1))
         (Eq false (Eq 124 N1))
         (Eq false (Eq 125 N1))
         (Eq false (Eq 91 N1))
         (Eq false (Eq 94 N1))
         (Eq false (Eq 36 N1))
         (Eq false (Eq 40 N1))
         (Eq false (Eq 41 N1))
         (Eq false (Eq 42 N1))
         (Eq false (Eq 43 N1))
         (Eq false (Eq 46 N1))
         (Eq false (Eq 63 N1))
         (Eq false (Eq 10 N1))
         (Eq false (Eq 92 N2))
         (Eq 0
             (And w32 (ZExt w32 (ReadLSB w16 N7:(Extract w32 0 (Add w64 256
                                                                        (Mul w64 2
                                                                                 N8:(SExt w64 (ZExt w32 N2))))) const_arr1))
                      8))
         (Eq false (Eq 123 N2))
         (Eq false (Eq 124 N2))
         (Eq false (Eq 125 N2))
         (Eq false (Eq 91 N2))
         (Eq false (Eq 94 N2))
         (Eq false (Eq 36 N2))
         (Eq false (Eq 40 N2))
         (Eq false (Eq 41 N2))
         (Eq false (Eq 42 N2))
         (Eq false (Eq 43 N2))
         (Eq false (Eq 46 N2))
         (Eq false (Eq 63 N2))
         (Eq false (Eq 10 N2))
         (Eq false (Eq 96 N0))
         (Eq false (Eq 98 N0))
         (Eq false (Eq 115 N0))
         (Eq false (Eq 119 N0))
         (Eq false (Eq 66 N0))
         (Eq false (Eq 83 N0))
         (Eq false (Eq 87 N0))
         (Eq false (Eq 39 N0))
         (Eq false (Eq 49 N0))
         (Eq false (Eq 50 N0))
         (Eq false (Eq 51 N0))
         (Eq false (Eq 52 N0))
         (Eq false (Eq 53 N0))
         (Eq false (Eq 54 N0))
         (Eq false (Eq 55 N0))
         (Eq false (Eq 56 N0))
         (Eq false (Eq 57 N0))
         (Eq false (Eq 60 N0))
         (Eq false (Eq 62 N0))
         (Eq false (Eq 96 N1))
         (Eq false (Eq 98 N1))
         (Eq false (Eq 115 N1))
         (Eq false (Eq 119 N1))
         (Eq false (Eq 66 N1))
         (Eq false (Eq 83 N1))
         (Eq false (Eq 87 N1))
         (Eq false (Eq 39 N1))
         (Eq false (Eq 49 N1))
         (Eq false (Eq 50 N1))
         (Eq false (Eq 51 N1))
         (Eq false (Eq 52 N1))
         (Eq false (Eq 53 N1))
         (Eq false (Eq 54 N1))
         (Eq false (Eq 55 N1))
         (Eq false (Eq 56 N1))
         (Eq false (Eq 57 N1))
         (Eq false (Eq 60 N1))
         (Eq false (Eq 62 N1))
         (Eq false (Eq 96 N2))
         (Eq false (Eq 98 N2))
         (Eq false (Eq 115 N2))
         (Eq false (Eq 119 N2))
         (Eq false (Eq 66 N2))
         (Eq false (Eq 83 N2))
         (Eq false (Eq 87 N2))
         (Eq false (Eq 39 N2))
         (Eq false (Eq 49 N2))
         (Eq false (Eq 50 N2))
         (Eq false (Eq 51 N2))
         (Eq false (Eq 52 N2))
         (Eq false (Eq 53 N2))
         (Eq false (Eq 54 N2))
         (Eq false (Eq 55 N2))
         (Eq false (Eq 56 N2))
         (Eq false (Eq 57 N2))
         (Eq false (Eq 60 N2))
         (Eq false (Eq 62 N2))
         (Eq false (Eq 0 N0))
         (Eq false (Eq 0 N1))
         (Eq false (Eq 0 N2))
         (Eq N9:(SExt w32 (Extract w8 0 N8))
             (SExt w32 (Extract w8 0 N6)))
         (Eq false
             (Eq (SExt w32 (Extract w8 0 N4))
                 N9))]
        false)
